(defun fact (n)
  (if (= 0 n)
    1
    (* n (fact (- n 1)))))

(defun map (ls f)
  (if (nil? ls)
    nil
    (cons
      (f (hd ls))
      (map (tail ls) f))))

(defun filter (ls pred)
  (cond
    (nil? ls) nil
    (pred (hd ls))
    (cons
      (hd ls)
      (filter (tail ls) pred))
    :else (filter (tail ls) pred)))

(def numbers '(1 2 3 4 5 6))

(io-puts (filter numbers (fun (a) (= 0 (mod a 2)))))

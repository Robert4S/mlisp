(deftype {:car :cdr})
(defun head (xs) (:car xs))
(defun tail (xs) (:cdr xs))
(defun map (xs f) (do
   (cond 
     (nil? xs) nil
     else #__MODULE__{:car (f (head xs)) :cdr (map (tail xs) f)})))

(defimpl Show.Show __MODULE__
  (
   (defun show (lst) (do
       (defun show-inner (lst) 
         (cond
          (nil? lst) "]"
          (nil? (:cdr lst)) (str (:car lst) "]")
          else (str (:car lst) ", " (show-inner (:cdr lst)))))
        (str "[" (show-inner lst))))
   ))
